// This file was generated by counterfeiter
package servicefakes

import (
	"sync"

	. "github.com/search-api/model"
	"github.com/search-api/service"
)

type FakeElasticer struct {
	SearchStub        func(sku string) (*Product, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		sku string
	}
	searchReturns struct {
		result1 *Product
		result2 error
	}
	DeleteStub        func(sku int) (bool, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		sku int
	}
	deleteReturns struct {
		result1 bool
		result2 error
	}
	AddStub        func() (bool, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct{}
	addReturns     struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeElasticer) Search(sku string) (*Product, error) {
	fake.searchMutex.Lock()
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		sku string
	}{sku})
	fake.recordInvocation("Search", []interface{}{sku})
	fake.searchMutex.Unlock()
	if fake.SearchStub != nil {
		return fake.SearchStub(sku)
	}
	return fake.searchReturns.result1, fake.searchReturns.result2
}

func (fake *FakeElasticer) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeElasticer) SearchArgsForCall(i int) string {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return fake.searchArgsForCall[i].sku
}

func (fake *FakeElasticer) SearchReturns(result1 *Product, result2 error) {
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 *Product
		result2 error
	}{result1, result2}
}

func (fake *FakeElasticer) Delete(sku int) (bool, error) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		sku int
	}{sku})
	fake.recordInvocation("Delete", []interface{}{sku})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(sku)
	}
	return fake.deleteReturns.result1, fake.deleteReturns.result2
}

func (fake *FakeElasticer) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeElasticer) DeleteArgsForCall(i int) int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].sku
}

func (fake *FakeElasticer) DeleteReturns(result1 bool, result2 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeElasticer) Add() (bool, error) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct{}{})
	fake.recordInvocation("Add", []interface{}{})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub()
	}
	return fake.addReturns.result1, fake.addReturns.result2
}

func (fake *FakeElasticer) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeElasticer) AddReturns(result1 bool, result2 error) {
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeElasticer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeElasticer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Elasticer = new(FakeElasticer)
