// This file was generated by counterfeiter
package repositoryfakes

import (
	"sync"

	. "github.com/olivere/elastic"
	"github.com/search-api/repository"
)

type FakeElasticSearcher struct {
	SearchByIDStub        func(sku int) (*GetResult, error)
	searchByIDMutex       sync.RWMutex
	searchByIDArgsForCall []struct {
		sku int
	}
	searchByIDReturns struct {
		result1 *GetResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeElasticSearcher) SearchByID(sku int) (*GetResult, error) {
	fake.searchByIDMutex.Lock()
	fake.searchByIDArgsForCall = append(fake.searchByIDArgsForCall, struct {
		sku int
	}{sku})
	fake.recordInvocation("SearchByID", []interface{}{sku})
	fake.searchByIDMutex.Unlock()
	if fake.SearchByIDStub != nil {
		return fake.SearchByIDStub(sku)
	}
	return fake.searchByIDReturns.result1, fake.searchByIDReturns.result2
}

func (fake *FakeElasticSearcher) SearchByIDCallCount() int {
	fake.searchByIDMutex.RLock()
	defer fake.searchByIDMutex.RUnlock()
	return len(fake.searchByIDArgsForCall)
}

func (fake *FakeElasticSearcher) SearchByIDArgsForCall(i int) int {
	fake.searchByIDMutex.RLock()
	defer fake.searchByIDMutex.RUnlock()
	return fake.searchByIDArgsForCall[i].sku
}

func (fake *FakeElasticSearcher) SearchByIDReturns(result1 *GetResult, result2 error) {
	fake.SearchByIDStub = nil
	fake.searchByIDReturns = struct {
		result1 *GetResult
		result2 error
	}{result1, result2}
}

func (fake *FakeElasticSearcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.searchByIDMutex.RLock()
	defer fake.searchByIDMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeElasticSearcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.ElasticSearcher = new(FakeElasticSearcher)
